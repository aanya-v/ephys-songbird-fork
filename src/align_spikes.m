% This function takes spike times in clean_trials (generated by get_spikes2020)
% and aligns them to a specificed syllable (e.g. 'a') so that the onset or offset of 'a'
% is t = 0. It also optionally timewarps.

%% Inputs: 
% (1) clean_trials (from get_motif_spikes output)
% (2) align_syl_num - which syllable number in the sequence to align to
% (e.g. for 'a' in 'abc' enter 1)
% (3) align_position - 'onset' or 'offset' or 'premotor_onset'
% (4) pre_onset_time_s - the premotor window from get_motif_spikes
% (5) syl_or_seq - the syllable sequence (saved in the get_motif_spikes
% output)
% (6) timewarp - 1 for yes, 0 for no. calls timewarping_lyndie_2019



function [adj_spiketimes, adj_syl_times] = foo(clean_trials,align_syl_num,align_position,pre_onset_time_s,syl_or_seq,timewarp,postmotor_cushion) % creates a new array of spiketimes adjusted so the align syllable onset or offset is t=0


    if contains(align_position,'onset') %syllable onset
            for m = 1:size(clean_trials,1)
                adj_spiketimes{m,:} = clean_trials{m,6} - clean_trials{m,3}(align_syl_num,1);
                adj_syl_times{m,:} = clean_trials{m,3} - clean_trials{m,3}(align_syl_num,1);
            end
    elseif contains(align_position,'offset') %syllable offset
            for m = 1:length(clean_trials)
                adj_spiketimes{m,:} = clean_trials{m,6} - clean_trials{m,3}(align_syl_num,2);
                adj_syl_times{m,:} = clean_trials{m,3} - clean_trials{m,3}(align_syl_num,2);
            end
    elseif contains(align_position,'premotor_win') %onset of premotor window
            for m = 1:size(clean_trials,1)
                premotor_onset = clean_trials{m,3}(align_syl_num,1) - pre_onset_time_s;
                spiketimes = clean_trials{m,6};
                adj_spiketimes{m,:} = clean_trials{m,6} - premotor_onset;
                adj_syl_times{m,:} = clean_trials{m,3} - clean_trials{m,3}(align_syl_num,1);
            end
    else
            error('Align position must be onset or offset')
    end
           
        if timewarp == 1
            if postmotor_cushion > 0
            error('timewarping currently does not work with a postmotor cushion')
            end 
            [spiketimes_warped, canonical_syl_time_vec] = timewarping_lyndie_2019(adj_syl_times,adj_spiketimes,pre_onset_time_s,syl_or_seq);
            adj_spiketimes = transpose(spiketimes_warped);
            adj_syl_times = canonical_syl_time_vec;
        end
    end